// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import 'frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These types are ignored because they are neither used by any `pub` functions nor (for structs and enums) marked `#[frb(unignore)]`: `BITBOX_DEVICES`, `BITBOX_PAIRING_DEVICES`
// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `clone`, `deref`, `deref`, `fmt`, `initialize`, `initialize`

Uint8List? getUsbWriteDataWrapper({required String serialNumber}) =>
    RustLib.instance.api.crateApiGetUsbWriteDataWrapper(serialNumber: serialNumber);

void setUsbReadDataWrapper({required String serialNumber, required List<int> data}) =>
    RustLib.instance.api.crateApiSetUsbReadDataWrapper(serialNumber: serialNumber, data: data);

Future<String> getRootFingerprint({required String serialNumber}) =>
    RustLib.instance.api.crateApiGetRootFingerprint(serialNumber: serialNumber);

Future<DeviceInfo> getDeviceInfo({required String serialNumber}) =>
    RustLib.instance.api.crateApiGetDeviceInfo(serialNumber: serialNumber);

Future<void> closeDevice({required String serialNumber}) =>
    RustLib.instance.api.crateApiCloseDevice(serialNumber: serialNumber);

Future<void> closeUsbChannel({required String serialNumber}) =>
    RustLib.instance.api.crateApiCloseUsbChannel(serialNumber: serialNumber);

Future<String?> startPairing({required String serialNumber}) =>
    RustLib.instance.api.crateApiStartPairing(serialNumber: serialNumber);

Future<bool> confirmPairing({required String serialNumber}) =>
    RustLib.instance.api.crateApiConfirmPairing(serialNumber: serialNumber);

Future<String> getBtcXpub({required String serialNumber, required String keypath, required String xpubType}) =>
    RustLib.instance.api.crateApiGetBtcXpub(serialNumber: serialNumber, keypath: keypath, xpubType: xpubType);

Future<String> verifyAddress(
        {required String serialNumber, required String keypath, required bool testnet, String? scriptType}) =>
    RustLib.instance.api
        .crateApiVerifyAddress(serialNumber: serialNumber, keypath: keypath, testnet: testnet, scriptType: scriptType);

Future<String> signPsbt({required String serialNumber, required String psbtStr, required bool testnet}) =>
    RustLib.instance.api.crateApiSignPsbt(serialNumber: serialNumber, psbtStr: psbtStr, testnet: testnet);

class DeviceInfo {
  final String name;
  final String version;
  final bool initialized;

  const DeviceInfo({
    required this.name,
    required this.version,
    required this.initialized,
  });

  @override
  int get hashCode => name.hashCode ^ version.hashCode ^ initialized.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is DeviceInfo &&
          runtimeType == other.runtimeType &&
          name == other.name &&
          version == other.version &&
          initialized == other.initialized;
}
